#include <stdio.h>
#include <stdlib.h>

typedef char ElementType;
typedef struct TNode *Position;
typedef Position BinTree;
struct TNode{
    ElementType Data;
    BinTree Left;
    BinTree Right;
};

BinTree CreatBinTree(); /* 实现细节忽略 */
void InorderTraversal( BinTree BT );
void PreorderTraversal( BinTree BT );
void PostorderTraversal( BinTree BT );
void LevelorderTraversal( BinTree BT );

int main()
{
    BinTree BT = CreatBinTree();
    printf("Inorder:");    InorderTraversal(BT);    printf("\n");
    printf("Preorder:");   PreorderTraversal(BT);   printf("\n");
    printf("Postorder:");  PostorderTraversal(BT);  printf("\n");
    printf("Levelorder:"); LevelorderTraversal(BT); printf("\n");
    return 0;
}

void InorderTraversal( BinTree BT ){
  if(BT){
    InorderTraversal(BT->Left);
    printf(" %c", BT->Data);
    InorderTraversal(BT->Right);
  }
}
void PreorderTraversal( BinTree BT ){
  if(BT){
    printf(" %c", BT->Data);
    PreorderTraversal(BT->Left);
    PreorderTraversal(BT->Right);
  }
}
void PostorderTraversal( BinTree BT ){
  if(BT){
    PostorderTraversal(BT->Left);
    PostorderTraversal(BT->Right);
    printf(" %c", BT->Data);
  }
}
void LevelorderTraversal(BinTree BT){
	Queue Q;
  BinTree T;
  if(!BT)	return;
  Q = CreatQueue();
  AddQ(Q, BT);
  while(!IsEmpty(Q)){
  	T = DeleteQ(Q);
    printf(" %c", T->Data);
    if(T->Left)	AddQ(Q, T->Left);
    if(T->Right) AddQ(Q, T->Right);
  }
}
/*void LevelorderTraversal(BinTree BT){
    if (!BT)	return;
    BinTree T[100];
    int head = 0, last = 0;
    T[last++] = BT;  
    while (head < last){
        BinTree temp = T[head++];
        printf(" %c", temp->Data);
        if (temp->Left)
            T[last++] = temp->Left;
        if (temp->Right)
            T[last++] = temp->Right;        
    }
}*/
