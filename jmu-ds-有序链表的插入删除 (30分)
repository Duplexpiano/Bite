#include <iostream>
using namespace std;
typedef int ElemType;
typedef struct LNode  		//定义单链表结点类型
{
	ElemType data;
	struct LNode* next;		//指向后继结点
} LNode, * LinkList;
void CreateListR(LinkList& L, int n);//尾插法建链表
void DispList(LinkList L);//输出链表
void DestroyList(LinkList& L);//销毁链表
void ListInsert(LinkList& L, ElemType e);//有序链表插入元素e
void ListDelete(LinkList& L, ElemType e);//链表删除元素e
int main()
{
	LinkList L, L1, L2;
	int n, e;
	cin >> n;
	CreateListR(L, n);//细节不表。
	cin >> n;
	while (n--)
	{
		cin >> e;
		ListInsert(L, e);
	}
	cout << "插入数据后的链表:";
	DispList(L);
	cout << endl;
	cin >> n;
	while (n--)
	{
		cin >> e;
		ListDelete(L, e);
	}
	cout << "删除数据后的链表:";
	DispList(L);
	DestroyList(L);//销毁链表，细节不表
	return 0;
}
void DispList(LinkList L)
{
	LinkList p;
	int flag = 1;
	p = L->next;
	if (L->next == NULL)
	{
		cout << "空链表！";
		return;
	}
	while (p) {
		if (flag) {
			cout << p->data; flag = 0;
		}
		else {
			cout << " " << p->data;
		}
		p = p->next;
	}
}

void ListInsert(LinkList& L, ElemType e) {
	LinkList p = (LinkList)malloc(sizeof(struct LNode)), s = (LinkList)malloc(sizeof(struct LNode));
	p = L;
	while (1) {
		if (p && p->next) {
			if (e >= p->data && e <= p->next->data) {
				s->data = e;
				s->next = p->next;
				p->next = s;
				return;
			}
			p = p->next;
		}
		else
			break;
	}
	s->data = e;
	p->next = s;
	p = p->next;
	p->next = NULL;
	return;
}
void ListDelete(LinkList& L, ElemType e) {
	LinkList p = (LinkList)malloc(sizeof(struct LNode));
	p = L;
	if (!p->next)	return;
	while (1) {
		if (p && p->next) {
			if (e == p->next->data) {
				p->next = p->next->next;
				return;
			}
		}
		if (!p)
			break;
		p = p->next;
	}
	printf("%d找不到！\n", e);
}
