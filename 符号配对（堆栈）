#include <stdio.h>
#include <stdlib.h>

#define Maxsize 101

typedef struct stack {
	char data[Maxsize];
	int top;
}stack;

void Initstack(stack *&s);
bool Push(stack *&s, char ch);
bool IsEmpty(stack *s);
bool Gettop(stack *s, char &ch);
bool Pop(stack *&s);

int main() {
	stack* s;
	int i = 0, len, flag = 0;
	char str[1000], ch;
	Initstack(s);
	scanf("%c", &str[i]);
	while (!(i >= 1 && str[i] == '\n' && str[i - 1] == '.')) {
		i++;
		scanf("%c", &str[i]);
	}
	len = i - 1;
	i = 0;
	while (i < len) {
		switch (str[i]) {
		case '/':
			if (i + 1 < len && str[i + 1] == '*') {
				Push(s, str[i]);
				Push(s, str[i + 1]);
				i++;
			}
			break;
		case '{':
		case '[':
		case '(':
			Push(s, str[i]);
			break;
		case '*':
			if (i + 1 < len && str[i + 1] == '/') {
				if (Gettop(s, ch) && ch == '*') {
					Pop(s);
					Pop(s);
				}
				else
					flag = 1;
				i++;
			}
			break;
		case '}':
			if (Gettop(s, ch) && ch == '{')
				Pop(s);
			else
				flag = 1;
			break;
		case ']':
			if (Gettop(s, ch) && ch == '[')
				Pop(s);
			else
				flag = 1;
			break;
		case ')':
			if (Gettop(s, ch) && ch == '(')
				Pop(s);
			else
				flag = 1;
			break;
		default:
			break;
		}
		if (flag == 1) {
			printf("NO\n");
			if (IsEmpty(s)) {
				if (str[i] == '/') {
					printf("?-*/");
				}
				else
					printf("?-%c", str[i]);
			}
			else {
				if (ch == '*')
					printf("/*-?");
				else
					printf("%c-?", ch); 
			}
			break;
		}
		i++;
	}
	if (flag == 0 && !IsEmpty(s)) {
		printf("NO\n");
		Gettop(s, ch);
		if (ch == '*')
			printf("/*-?");
		else
			printf("%c-?", ch);
	}
	else if (flag == 0) {
		printf("YES\n");
	}
	return 0;
}

void Initstack(stack *&s) {
	s = (stack*)malloc(sizeof(stack));
	s->top = -1;
}
bool Push(stack *&s, char ch) {
	if (s->top == Maxsize - 1)
		return false;
	s->top++;
	s->data[s->top] = ch;
	return true;
}
bool IsEmpty(stack* s) {
	if (s->top == -1)
		return true;
	else
		return false;
}
bool Gettop(stack* s, char& ch) {
	if (s->top == -1)
		return false;
	ch = s->data[s->top];
	return true;
}
bool Pop(stack *&s) {
	if (IsEmpty(s))
		return false;
	s->top--;
	return true;
}
