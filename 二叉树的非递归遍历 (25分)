#include <stdio.h>
#include <stdlib.h>
typedef enum { false, true } bool;

typedef char ElementType;
typedef struct TNode *Position;
typedef Position BinTree;
struct TNode{
    ElementType Data;
    BinTree Left;
    BinTree Right;
    int flag;
};

/*------堆栈的定义-------*/
typedef Position SElementType;
typedef struct SNode *PtrToSNode;
struct SNode {
	SElementType Data;
	PtrToSNode Next;
};
typedef PtrToSNode Stack;

/* 裁判实现，细节不表 */
Stack CreateStack();
bool IsEmpty( Stack S );
bool Push( Stack S, SElementType X );
SElementType Pop( Stack S ); /* 删除并仅返回S的栈顶元素 */
SElementType Peek( Stack S );/* 仅返回S的栈顶元素 */
/*----堆栈的定义结束-----*/

BinTree CreateBinTree(); /* 裁判实现，细节不表 */
void InorderTraversal( BinTree BT );
void PreorderTraversal( BinTree BT );
void PostorderTraversal( BinTree BT );

int main()
{
    BinTree BT = CreateBinTree();
    printf("Inorder:");    InorderTraversal(BT);    printf("\n");
    printf("Preorder:");   PreorderTraversal(BT);   printf("\n");
    printf("Postorder:");  PostorderTraversal(BT);  printf("\n");
    return 0;
}
/* 你的代码将被嵌在这里 */
void InorderTraversal( BinTree BT )//中序
{
    BinTree T = BT;
    Stack S = CreateStack();//创建堆栈
    while (T || !IsEmpty(S))//当树不空或者堆栈不空时
    {
        while (T)//一直访问左子树
        {
            Push(S,T);//入栈
            T = T->Left;
        }
        if (!IsEmpty(S))//左子树遍历完后
        {
            T = Pop(S);//出栈
            printf(" %c",T->Data);//访问数据
            T = T->Right;//转为访问右子树
        }
    }
}
void PreorderTraversal( BinTree BT )//先序
{
    BinTree T = BT;
    Stack S = CreateStack();//创建堆栈
    while (T || !IsEmpty(S))//当树不空或者堆栈不空时
    {
        while (T)//一直访问左子树
        {
            Push(S,T);//入栈
            printf(" %c",T->Data);//访问数据
            T = T->Left;
        }
        if (!IsEmpty(S))//左子树遍历完后
        {
            T = Pop(S);//出栈
            T = T->Right;//转为访问右子树
        }
    }
}
void PostorderTraversal( BinTree BT )//后序
{
    /*左 右 根*/
    BinTree T = BT;
    Stack S = CreateStack();//创建堆栈
    while (T || !IsEmpty(S))//当树不空或者堆栈不空时
    {
        while (T)//一直访问左子树
        {
            Push(S,T);//入栈
            T->flag = 1;//第一次入栈
            T = T->Left;
        }
        if (!IsEmpty(S))//左子树遍历完后
        {
            T = Pop(S);//出栈
            if(T->flag == 1)//如果第一次入栈,右节点入栈
            {
                Push(S,T);//入栈
                T->flag = 2;//意味两次入栈
                T = T->Right;//转为访问右子树
            }
           else
            {

                printf(" %c",T->Data);//访问数据
                T = NULL;
            }
          
        }
    }
}
