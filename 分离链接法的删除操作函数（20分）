#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#define KEYLENGTH 15                   /* 关键词字符串的最大长度 */
typedef char ElementType[KEYLENGTH + 1]; /* 关键词类型用字符串 */
typedef int Index;                     /* 散列地址类型 */

typedef struct LNode* PtrToLNode;
struct LNode {
    ElementType Data;
    PtrToLNode Next;
};
typedef PtrToLNode Position;
typedef PtrToLNode List;

typedef struct TblNode* HashTable; /* 散列表类型 */
struct TblNode {   /* 散列表结点定义 */
    int TableSize; /* 表的最大长度 */
    List Heads;    /* 指向链表头结点的数组 */
};

Index Hash(ElementType Key, int TableSize)
{
    return (Key[0] - 'a') % TableSize;
}

HashTable BuildTable(); /* 裁判实现，细节不表 */
bool Delete(HashTable H, ElementType Key);

int main()
{
    HashTable H;
    ElementType Key;

    H = BuildTable();
    scanf("%s", Key);
    if (Delete(H, Key) == false)
        printf("ERROR: %s is not found\n", Key);
    if (Delete(H, Key) == true)
        printf("Are you kidding me?\n");
    return 0;
}

/* 你的代码将被嵌在这里 */
bool Delete(HashTable H, ElementType Key) {
    Index Pos = Hash(Key, H->TableSize);
    if (H->Heads[Pos].Next == NULL)  //判断下一个结点是否存在
        return false;
    PtrToLNode p, q;
    p = H->Heads[Pos].Next;  //Pos单链表头结点为空，直接跳到下一个结点
    while (strcmp(p->Data, Key) != 0 && p->Next != NULL) {
        q = p;         //记录要删除的上一个结点
        p = p->Next;   //遍历
    }
    if (strcmp(p->Data, Key) == 0) {    //Find
        printf("%s is deleted from list Heads[%d]\n", Key, Pos);
        q = p->Next;      //删除p结点
        free(p);          //释放p结点空间
        return true;
    }
    else return false;    //Not Find
}
